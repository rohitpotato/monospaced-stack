name: Deploy monospaced frontend

on:
  push:
    branches:
      - main
    paths:
      - frontend/**
  release:
    types: [published]
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  actions: read
  attestations: write
  checks: write
  contents: write
  deployments: write
  id-token: write
  issues: write
  discussions: write
  packages: write
  pages: write
  pull-requests: write
  repository-projects: write
  security-events: write
  statuses: write

jobs:
  build_and_deploy:
    name: Build and Publish Image
    runs-on: ubuntu-latest
    outputs:
      frontend_image: ${{ steps.image-refs.outputs.frontend_image }}
      image_version: ${{ steps.image-refs.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login into registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
          tags: |
            type=sha,prefix={{branch}}-,format=short  # e.g., main-<sha>
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Monospaced Frontend
            org.opencontainers.image.description=Frontend for Monospaced application

      - name: Login into vault
        id: import-secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ secrets.VAULT_URL }}
          token: ${{ secrets.VAULT_TOKEN }}
          secrets: |
            kv/data/monospaced/frontend * | FCONFIG_

      - name: Write secrets to .env file
        if: steps.import-secrets.outcome == 'success'
        run: |
          cd frontend
          env | awk '/^FCONFIG_/ {split($0,a,"="); sub(/^FCONFIG_/, "", a[1]); print a[1] "=" a[2]}' > .env
          echo "Created .env"
          cat .env

      - name: Build and push frontend
        if: steps.import-secrets.outcome == 'success'
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./frontend
          file: ./frontend/frontend.dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Output image references
        id: image-refs
        run: |
          # Debug: Print raw tags
          echo "Frontend tags: ${{ steps.meta-frontend.outputs.tags }}"

          # Extract SHA-based tag (e.g., main-<sha>)
          FRONTEND_TAG=$(echo "${{ steps.meta-frontend.outputs.tags }}" | tr ',' '\n' | grep "${{ github.ref_name }}-" | head -1)

          # Extract short SHA from tag (e.g., <sha> from main-<sha>)
          VERSION=$(echo "$FRONTEND_TAG" | sed -E 's/.*:${{ github.ref_name }}-([0-9a-f]{7,}).*/\1/')

          # Fallback if VERSION is empty
          if [ -z "$VERSION" ]; then
            VERSION=$(git rev-parse --short HEAD)
            FRONTEND_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}-$VERSION"
          fi

          echo "frontend_image=$FRONTEND_TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          echo "Built images:"
          echo "Frontend: $FRONTEND_TAG"
          echo "Version: $VERSION"

  update_config_repo:
    needs: build_and_deploy
    name: Update Config Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Display built images
        run: |
          echo "Frontend Image: ${{ needs.build_and_deploy.outputs.frontend_image }}"
          echo "Version: ${{ needs.build_and_deploy.outputs.image_version }}"

      - name: Setup SSH key for k8s-apps repository
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.K8S_APPS_SSH_KEY }}

      - name: Add k8s-apps repository to known hosts
        run: |
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts

      - name: Update frontend image in k8s-apps repository
        run: |
          chmod +x scripts/update-image-tag.sh
          ./scripts/update-image-tag.sh monospaced-frontend frontend/production/monospaced-frontend "${{ needs.build_and_deploy.outputs.frontend_image }}"
