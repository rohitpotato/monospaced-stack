version: '3.9'

services:
  frontend:
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`rohitpotato.xyz`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=le"
        - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    container_name: frontend
    image: ghcr.io/rohitpotato/monospaced-stack/frontend:latest
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    ports:
      - 3000:3000
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:4000
    restart: always
   
    depends_on:
      - backend

  backend:
    container_name: backend
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`api.rohitpotato.xyz`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=le"
        - "traefik.http.services.backend.loadbalancer.server.port=4000"
    healthcheck:
      test: [ "CMD", "curl", '-f', 'http://localhost:4000/health' ]
      interval: 30s
      timeout: 30s
      retries: 5
    image: ghcr.io/rohitpotato/monospaced-stack/backend:latest
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    ports:
      - 4000:4000
    
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://rohit:monospaced@db:5432/monospaced?schema=public
      - EMAIL=rohit.212@icloud.com
      - PORT=4000
    depends_on:
      - db

  db:
    container_name: db
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: rohit
      PGUSER: rohit
      POSTGRES_PASSWORD: monospaced
      POSTGRES_DB: monospaced
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U rohit -d monospaced" ]
      interval: 10s
      timeout: 5s
      retries: 3
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init/:/docker-entrypoint-initdb.d/

  reverse-proxy:
    container_name: reverse-proxy
    image: traefik:v3.1
    command:
      - "--api.dashboard=true" # Enable the dashboard
      - "--providers.docker=true" # Enable Docker as a provider
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false" # Expose only explicitly configured services
      - "--entrypoints.web.address=:80" # HTTP entrypoint
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure" # Redirect HTTP to HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443" # HTTPS entrypoint
      - "--certificatesresolvers.le.acme.email=rohit.mmm1996@gmai.com" # Let's Encrypt email
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json" # SSL cert storage
      - "--certificatesresolvers.le.acme.tlschallenge=true" # TLS challenge for certs
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Docker socket for service discovery
      - "./letsencrypt:/letsencrypt" # Persistent storage for SSL certificates
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.rohitpotato.xyz`)" # Dashboard router
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=le"
      - "traefik.http.routers.dashboard.service=api@internal"

volumes:
  pgdata: {}
  letsencrypt:
