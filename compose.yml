version: '3.9'

services:
  frontend:
    image: ghcr.io/rohitpotato/monospaced-stack/frontend:latest
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`rohitpotato.xyz`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=le"
        - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:4000
    networks:
      - proxy
    depends_on:
      - backend

  backend:
    image: ghcr.io/rohitpotato/monospaced-stack/backend:latest
    build:
      context: ./backend
      dockerfile: backend.dockerfile
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`api.rohitpotato.xyz`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=le"
        - "traefik.http.services.backend.loadbalancer.server.port=4000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://rohit:monospaced@db:5432/monospaced?schema=public
      - EMAIL=rohit.212@icloud.com
      - PORT=4000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - proxy
    depends_on:
      - db

  db:
    image: postgres:14
    environment:
      POSTGRES_USER: rohit
      PGUSER: rohit
      POSTGRES_PASSWORD: monospaced
      POSTGRES_DB: monospaced
    deploy:
      mode: global
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U rohit -d monospaced"]
      interval: 10s
      timeout: 5s
      retries: 3
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d/
    networks:
      - proxy

  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.swarm.network=proxy" # Use the network created above
      - "--providers.swarm.endpoint=unix:///var/run/docker.sock"  # Use Docker socket
      - "--providers.swarm.exposedbydefault=false" # Don't expose every container
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--certificatesresolvers.le.acme.email=rohit.mmm1996@gmail.com"
      - "--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.le.acme.tlschallenge=true"
      - "--api.dashboard=true"
      - "--accesslog=true"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
      - "--metrics.prometheus.addRoutersLabels=true"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.rule=Host(`dashboard.rohitpotato.xyz`)"
        - "traefik.http.routers.dashboard.entrypoints=websecure"
        - "traefik.http.routers.dashboard.tls.certresolver=le"
        - "traefik.http.routers.dashboard.service=api@internal"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    networks:
      - proxy
  
  prometheus:
    image: prom/prometheus:v3.1.0
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.prometheus.rule=Host(`prometheus.rohitpotato.xyz`)"
        - "traefik.http.routers.prometheus.entrypoints=websecure"
        - "traefik.http.routers.prometheus.tls.certresolver=le"
        - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    volumes:
      - prometheus_data:/prometheus # Persistent storage for metrics
      - ./prometheus:/etc/prometheus # Prometheus configuration
      - ./alertmanager/alert-rules.yml:/etc/prometheus/alert-rules.yml # Alerting rules
    networks:
      - proxy

  grafana:
    image: grafana/grafana:11.4.0
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.rohitpotato.xyz`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls.certresolver=le"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    networks:
      - proxy
    volumes:
      - grafana_data:/var/lib/grafana # Persistent storage for Grafana
      - ./grafana.ini:/etc/grafana/grafana.ini # Grafana configuration
    depends_on:
      - prometheus
    restart: unless-stopped

  node-exporter: # for host metrics
    image: prom/node-exporter:v1.8.2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"  
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    deploy:
      mode: global
      labels:
         - "traefik.enable=true"
         - "traefik.http.services.node-exporter.loadbalancer.server.port=9100"
    networks:
      - proxy

  cadvisor: # for container metrics
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.cadvisor.loadbalancer.server.port=8080"
    networks:
      - proxy
    
  alertmanager:
    image: prom/alertmanager:v0.27.0
    restart: unless-stopped
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    secrets:
      - slack_api_url
    deploy:
      mode: global
      labels:
        - "traefik.enable=true"
        - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

networks:
  proxy:
    name: proxy
    driver: overlay
    attachable: true

volumes:
  pgdata: {}
  letsencrypt:
  prometheus_data:
  grafana_data:

secrets:
  slack_api_url:
    external: true